{"version":3,"file":"static/js/71.6180faf6.chunk.js","mappings":"qLAEA,MAgBA,EAhBqBA,KAEjBC,EAAAA,EAAAA,KAAA,OACEC,MAAO,CACLC,QAAS,QACTC,MAAO,QACPC,OAAQ,QACRC,UAAW,UACXC,OAAQ,UAEVC,IAAKC,EACLC,IAAI,S,uKCTV,MAcA,EAdkBC,KAEdC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1Bb,EAAAA,EAAAA,KAAA,OAAKO,IAAKO,EAAUL,IAAI,cACxBE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,0BAEhCb,EAAAA,EAAAA,KAAA,SAAM,kBAGRA,EAAAA,EAAAA,KAAA,OAAKO,IAAKQ,EAAcN,IAAI,oB,8GCJlC,MAAMO,EAAaA,CAACC,EAASC,EAAWC,KACtC,OAAQF,GACN,IAAK,UACH,OAAOjB,EAAAA,EAAAA,KAACoB,EAAAA,EAAO,IACjB,IAAK,UACH,OAAOD,GAAiBnB,EAAAA,EAAAA,KAACkB,EAAS,KAAMlB,EAAAA,EAAAA,KAACoB,EAAAA,EAAO,IAClD,IAAK,YACH,OAAOpB,EAAAA,EAAAA,KAACkB,EAAS,IACnB,IAAK,QACH,OAAOlB,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IACtB,QACE,MAAM,IAAIsB,MAAM,4BACpB,EAgEF,EA7DmBC,KACjB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCN,EAAgBO,IAAqBD,EAAAA,EAAAA,WAAS,IAC9CE,EAAQC,IAAaH,EAAAA,EAAAA,UAAS,IAC9BI,EAAaC,IAAkBL,EAAAA,EAAAA,WAAS,IAEzC,aAAEM,EAAY,QAAEd,EAAO,WAAEe,IAAeC,EAAAA,EAAAA,MAE9CC,EAAAA,EAAAA,YAAU,KACRC,EAAUR,GAAQ,EAAK,GAEtB,IAEH,MAAMQ,EAAYA,CAACR,EAAQS,KACfV,GAAVU,GACAL,EAAaJ,GACVU,KAAKC,GACLD,MAAK,IAAML,EAAW,cAAa,EAGlCM,EAAsBC,IAC1Bf,GAAeD,GAAe,IAAIA,KAAegB,KACjDb,GAAkB,GAClBE,GAAWD,GAAWA,EAAS,IAC/BG,EAAeS,EAAcC,OAAS,EAAE,EAsB1C,OACE7B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CAC1BG,EAAWC,GAAS,IArBJwB,KACnB,MAAMC,EAAQD,EAAIE,KAAI,CAACC,EAAMC,KAEzB7C,EAAAA,EAAAA,KAAA,MAAYY,UAAU,eAAcC,UAClCF,EAAAA,EAAAA,MAACmC,EAAAA,GAAI,CAACC,GAAI,WAAWH,EAAKI,KAAKnC,SAAA,EAC7Bb,EAAAA,EAAAA,KAAA,OACEY,UAAU,mBACVL,IAAKqC,EAAKK,UACVxC,IAAKmC,EAAKM,SAEZlD,EAAAA,EAAAA,KAAA,OAAKY,UAAU,oBAAmBC,SAAE+B,EAAKM,SACzClD,EAAAA,EAAAA,KAAA,OAAKY,UAAU,qBAAoBC,SAAE+B,EAAKO,YARrCN,KAab,OAAO7C,EAAAA,EAAAA,KAAA,MAAIY,UAAU,eAAcC,SAAE6B,GAAW,EAKnBU,CAAY7B,IAAaJ,IACpDnB,EAAAA,EAAAA,KAAA,UACEY,UAAU,mCACVyC,QAASA,IAAMlB,EAAUR,GACzB1B,MAAO,CAAEC,QAAS2B,EAAc,OAAS,SACzCyB,SAAUnC,EAAeN,UAEzBb,EAAAA,EAAAA,KAAA,OAAKY,UAAU,QAAOC,SAAC,kBAErB,E,aC5EV,MAaA,EAbmB0C,KAEf5C,EAAAA,EAAAA,MAAA6C,EAAAA,SAAA,CAAA3C,SAAA,EACEF,EAAAA,EAAAA,MAAC8C,EAAAA,EAAM,CAAA5C,SAAA,EACLb,EAAAA,EAAAA,KAAA,QAAM0D,KAAK,cAAcC,QAAQ,kCACjC3D,EAAAA,EAAAA,KAAA,SAAAa,SAAO,oBAETb,EAAAA,EAAAA,KAACU,EAAAA,EAAS,KACVV,EAAAA,EAAAA,KAACsB,EAAU,M,6CCXV,MCgFP,EAhFyBW,KACvB,MAAM,QAAE2B,EAAO,WAAEC,EAAU,QAAE5C,EAAO,WAAEe,GDDjB8B,MACrB,MAAO7C,EAASe,IAAcP,EAAAA,EAAAA,UAAS,WAiCvC,MAAO,CAAEmC,SA/BOG,EAAAA,EAAAA,cACdC,eACEC,GAII,IAHJC,EAAMC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,MACTE,EAAIF,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACPG,EAAOH,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAE,eAAgB,oBAE5BnC,EAAW,WAEX,IACE,MAAMuC,QAAiBC,MAAMP,EAAK,CAAEC,SAAQG,OAAMC,YAElD,IAAKC,EAASE,GACZ,MAAM,IAAIpD,MAAM,mBAAmB4C,cAAgBM,EAASG,UAK9D,aAFmBH,EAASI,MAG9B,CAAE,MAAOC,GAEP,MADA5C,EAAW,SACL4C,CACR,CACF,GACA,IAOgBf,YAJCE,EAAAA,EAAAA,cAAY,KAC7B/B,EAAW,UAAU,GACpB,IAE2Bf,UAASe,aAAY,ECjCE8B,GAE/Ce,EAAW,4CACXC,EAAU,0CAkCVC,EAAuBC,IACpB,CACLhC,GAAIgC,EAAKhC,GACTU,KAAMsB,EAAKtB,KACXuB,YAAaD,EAAKC,YACd,GAAGD,EAAKC,YAAYC,MAAM,EAAG,UAC7B,6CACJjC,UAAW+B,EAAK/B,UAAUkC,KAAO,IAAMH,EAAK/B,UAAUmC,UACtDC,SAAUL,EAAKM,KAAK,GAAGrB,IACvBsB,KAAMP,EAAKM,KAAK,GAAGrB,IACnBuB,OAAQR,EAAKQ,OAAO9C,QAIlB+C,EAAoBD,IAAY,IAADE,EACnC,MAAO,CACL1C,GAAIwC,EAAOxC,GACXE,MAAOsC,EAAOtC,MACd+B,YAAaO,EAAOP,aAAe,0BACnCU,UAAWH,EAAOG,UACd,GAAGH,EAAOG,kBACV,2CACJ1C,UAAWuC,EAAOvC,UAAUkC,KAAO,IAAMK,EAAOvC,UAAUmC,UAC1DQ,UAA+B,QAArBF,EAAAF,EAAOK,YAAY,UAAE,IAAAH,OAAA,EAArBA,EAAuBE,WAAY,QAC7CzC,MAAOqC,EAAOM,OAAO,GAAG3C,MACpB,GAAGqC,EAAOM,OAAO,GAAG3C,SACpB,gBACL,EAGH,MAAO,CACLU,aACA5C,UACAe,aACA+D,iBAjEuB/B,iBAAiC,IAA1BrC,EAAMwC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAFlB,IAMlB,aAHuBP,EACrB,GAAGiB,8BAAqClD,KAAUmD,MAEpCkB,KAAKC,QAAQtD,IAAIoC,EACnC,EA6DEmB,aA3DmBlC,UACnB,MAAMO,QAAiBX,EAAQ,GAAGiB,eAAsB7B,MAAO8B,KAC/D,OAAOC,EAAoBR,EAASyB,KAAKC,QAAQ,GAAG,EA0DpDE,mBAvDyBnC,gBACFJ,EACrB,GAAGiB,oBAA2BnB,KAAQoB,MAExBkB,KAAKC,QAAQtD,IAAIoC,GAoDjChD,aAjDmBiC,iBAAuB,IAAhBrC,EAAMwC,UAAA3B,OAAA,QAAA4B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAInC,aAHuBP,EACrB,GAAGiB,8CAAqDlD,KAAUmD,MAEpDkB,KAAKC,QAAQtD,IAAI8C,EACnC,EA6CEW,SA3CepC,UACf,MAAMO,QAAiBX,EAAQ,GAAGiB,WAAkB7B,KAAM8B,KAC1D,OAAOW,EAAiBlB,EAASyB,KAAKC,QAAQ,GAAG,EA0ClD,C","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import errorGif from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={errorGif}\r\n      alt=\"error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import \"./appBanner.scss\";\nimport avengers from \"../../resources/img/avengers.png\";\nimport avengersLogo from \"../../resources/img/avengers-logo.png\";\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers Logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import \"./comicsList.scss\";\n\nimport { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport { Link } from \"react-router-dom\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { getAllComics, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllComics(offset)\n      .then(onComicsListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    setComicsList((comicsList) => [...comicsList, ...newComicsList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 8);\n    setComicsEnded(newComicsList.length < 8);\n  };\n\n  const renderItems = (arr) => {\n    const items = arr.map((item, i) => {\n      return (\n        <li key={i} className=\"comics__item\">\n          <Link to={`/comics/${item.id}`}>\n            <img\n              className=\"comics__item-img\"\n              src={item.thumbnail}\n              alt={item.title}\n            />\n            <div className=\"comics__item-name\">{item.title}</div>\n            <div className=\"comics__item-price\">{item.price}</div>\n          </Link>\n        </li>\n      );\n    });\n    return <ul className=\"comics__grid\">{items}</ul>;\n  };\n\n  return (\n    <div className=\"comics__list\">\n      {setContent(process, () => renderItems(comicsList), newItemLoading)}\n      <button\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n        disabled={newItemLoading}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import AppBanner from \"../components/appBanner/AppBanner\";\r\nimport ComicsList from \"../components/comicsList/ComicsList\";\r\n\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Page with list of our comics\" />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=2da0ae7cb2e706a9e1d763264bff59b1\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const response = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return response.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const response = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n    return _transformCharacter(response.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const response = await request(\r\n      `${_apiBase}characters?name=${name}&${_apiKey}`\r\n    );\r\n    return response.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const response = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return response.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const response = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(response.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} pages`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","errorGif","alt","AppBanner","_jsxs","className","children","avengers","avengersLogo","setContent","process","Component","newItemLoading","Spinner","Error","ComicsList","comicsList","setComicsList","useState","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","length","arr","items","map","item","i","Link","to","id","thumbnail","title","price","renderItems","onClick","disabled","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacter","getCharacterByName","getComic"],"sourceRoot":""}