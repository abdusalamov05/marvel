{"version":3,"file":"static/js/125.733a0bda.chunk.js","mappings":"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","sources":["components/skeleton/Skeleton.js","utils/setContent.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","pages/MainPage.js","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <div>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Skeleton;\n","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n","import \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nimport { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n\n  const { clearError, getCharacter, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img className=\"randomchar__decoration\" src={mjolnir} alt=\"mjolnir\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n\n  const imgStyle = {\n    objectFit:\n      thumbnail ===\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n        ? \"contain\"\n        : \"cover\",\n  };\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        className=\"randomchar__img\"\n        style={imgStyle}\n        src={thumbnail}\n        alt=\"Random character\"\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import \"./charList.scss\";\n\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport PropTypes from \"prop-types\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEnded(newCharList.length < 9);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  const renderItems = (arr) => {\n    const items = arr.map((item, i) => {\n      const imgStyle = {\n        objectFit:\n          item.thumbnail ===\n          \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n            ? \"unset\"\n            : \"cover\",\n      };\n\n      return (\n        <li\n          key={i}\n          className=\"char__item\"\n          ref={(elem) => (itemRefs.current[i] = elem)}\n          tabIndex={0}\n          onClick={() => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          }}\n        >\n          <img style={imgStyle} src={item.thumbnail} alt={item.name} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      );\n    });\n    return <ul className=\"char__grid\">{items}</ul>;\n  };\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        disabled={newItemLoading}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import \"./charInfo.scss\";\n\nimport { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport PropTypes from \"prop-types\";\n\nconst CharInfo = ({ charId }) => {\n  const [char, setChar] = useState(null);\n\n  const { clearError, getCharacter, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, [charId]);\n\n  const updateChar = () => {\n    if (!charId) return;\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  const imgStyle = {\n    objectFit:\n      thumbnail ===\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n        ? \"contain\"\n        : \"cover\",\n  };\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img style={imgStyle} src={thumbnail} alt={name} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import \"./charSearchForm.scss\";\r\n\r\nimport { useState } from \"react\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Formik, Form, Field, ErrorMessage as ErrMsg } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, clearError, getCharacterByName } = useMarvelService();\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const errorMessage = error ? (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label htmlFor=\"charName\" className=\"char__search-label\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field name=\"charName\" placeholder=\"Enter name\" type=\"text\" />\r\n            <button\r\n              className=\"button button__main\"\r\n              disabled={loading}\r\n              type=\"submit\"\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <ErrMsg\r\n            name=\"charName\"\r\n            className=\"char__search-error\"\r\n            component=\"div\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import RandomChar from \"../components/randomChar/RandomChar\";\r\nimport CharList from \"../components/charList/CharList\";\r\nimport CharInfo from \"../components/charInfo/CharInfo\";\r\nimport decoration from \"../resources/img/vision.png\";\r\n\r\nimport { useState } from \"react\";\r\nimport ErrorBoundary from \"../components/errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../components/charSearchForm/CharSearchForm\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setSelectedChar(id);\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import errorGif from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={errorGif}\r\n      alt=\"error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=2da0ae7cb2e706a9e1d763264bff59b1\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const response = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return response.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const response = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n    return _transformCharacter(response.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const response = await request(\r\n      `${_apiBase}characters?name=${name}&${_apiKey}`\r\n    );\r\n    return response.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const response = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return response.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const response = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(response.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} pages`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["Skeleton","_jsxs","children","_jsx","className","setContent","process","Component","data","Spinner","ErrorMessage","Error","View","_ref","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","style","src","alt","href","RandomChar","char","setChar","useState","clearError","getCharacter","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","id","Math","floor","random","then","onCharLoaded","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","items","map","i","ref","elem","tabIndex","onCharSelected","onKeyDown","e","key","renderItems","display","disabled","_ref2","comics","_Fragment","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","CharSearchForm","loading","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","placeholder","type","ErrMsg","component","MainPage","selectedChar","setSelectedChar","Helmet","content","CharList","CharInfo","decoration","width","height","margin","errorGif","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllComics","getComic"],"sourceRoot":""}