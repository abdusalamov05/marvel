{"version":3,"file":"static/js/855.4e71d60f.chunk.js","mappings":"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","sources":["components/skeleton/Skeleton.js","utils/setContent.js","components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <div>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Skeleton;\n","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n","import errorGif from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={errorGif}\r\n      alt=\"error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import \"./appBanner.scss\";\nimport avengers from \"../../resources/img/avengers.png\";\nimport avengersLogo from \"../../resources/img/avengers-logo.png\";\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers Logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import AppBanner from \"../components/appBanner/AppBanner\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useMarvelService from \"../services/MarvelService\";\r\nimport setContent from \"../utils/setContent\";\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n  const [data, setData] = useState(null);\r\n  const { id } = useParams();\r\n\r\n  const { clearError, getComic, getCharacter, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData();\r\n    // eslint-disable-next-line\r\n  }, [id]);\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n\r\n    switch (dataType) {\r\n      case \"comic\":\r\n        getComic(id)\r\n          .then(onDataLoaded)\r\n          .then(() => setProcess(\"confirmed\"));\r\n        break;\r\n      case \"character\":\r\n        getCharacter(id)\r\n          .then(onDataLoaded)\r\n          .then(() => setProcess(\"confirmed\"));\r\n        break;\r\n      default:\r\n        console.error(dataType);\r\n    }\r\n  };\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBanner />\r\n      {setContent(process, Component, data)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SinglePage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=2da0ae7cb2e706a9e1d763264bff59b1\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const response = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return response.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const response = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n    return _transformCharacter(response.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const response = await request(\r\n      `${_apiBase}characters?name=${name}&${_apiKey}`\r\n    );\r\n    return response.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const response = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return response.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const response = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(response.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} pages`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["Skeleton","_jsxs","children","_jsx","className","setContent","process","Component","data","Spinner","ErrorMessage","Error","style","display","width","height","objectFit","margin","src","errorGif","alt","AppBanner","avengers","avengersLogo","_ref","dataType","setData","useState","id","useParams","clearError","getComic","getCharacter","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","console","error","_Fragment","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacterByName","getAllComics"],"sourceRoot":""}